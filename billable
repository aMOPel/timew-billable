#! /usr/bin/python

"""
File: timew-billable
Description:
    A script for organizing Timewarrior log entries into nested projects, tasks
    and subtasks with billable hours for the purposes of reporting & invoicing.
Authors: Trevor Richards <trev@trevdev.ca>
License: GPLv3
Version: 0.1.1
Updated: 2022-04-30
"""

from functools import reduce
from datetime import datetime, timedelta
import locale
import json
import sys

DATEFORMAT = "%Y%m%dT%H%M%SZ"
CONFIG_DEFAULTS = {
    "project_marker": "#", "separator": ".",
    "billable": 0, "description_marker": None,
    "locale": ''
}


def coerce_float(someval):
    """
    Coerce `someval` into a float. Failing that, return it.

    Parameters:
        someval (?): Input value.
    Returns:
        floatval (float...maybe): The maybe coerced value.
    """
    try:
        return float(someval)
    except ValueError:
        return someval


def to_config_dict(cdict, line):
    """
    Reduce a list of configuration lines into a configuration dictionary of
    relavent configurations for reporting.

    Parameters:
        cdict (dict): Configuration dictionary.
        line (str): A configuration file line.
    Returns:
        cdict (dict): An updated configration dictionary.
    """
    kvpair = line.split(": ", 2)
    conf_keys = kvpair[0].split(".")
    if conf_keys[0] != "billable":
        return cdict

    key = conf_keys[0] if len(conf_keys) < 2 else conf_keys[1]
    cdict[key] = coerce_float(kvpair[1])

    return cdict


def not_metadata(tag, config):
    """
    Test a tag to make sure it's not a piece of meta-data.

    Parameters:
        tag (str): A timewarrior task tag.
        config (dict): The billable configuration
    Returns:
        result (bool): The tag is not a configuration or metadata.
    """
    return tag not in config and not tag.startswith(config["project_marker"])


def take_first(pred, seq):
    """
    Grab the first item from a filtered list.

    Parameters:
        pred (function): Filter predicate.
        seq (sequence): The sequence to test.
    Returns:
        match (any|None): The first match, or None.
    """
    if seq:
        return next(filter(pred, seq), None)
    return None


def get_billable_hours(entry):
    """
    Get the time spent, and billable hours for an entry

    Parameters:
        entry (dict): A timewarrior time entry.
    Returns:
        hours (float): The hours spent on the entry.
    """
    start = datetime.strptime(entry["start"], DATEFORMAT)

    if "end" in entry:
        end = datetime.strptime(entry["end"], DATEFORMAT)
    else:
        end = datetime.utcnow()

    duration = end - start
    return round(duration / timedelta(hours=1), 3)


def get_rate(entry, config):
    """
    Find the contextual billable rate for a task.
    Parameters:
        entry (dict): A timewarrior log entry.
        config (dict): A configuration object.
    Returns:
        rate (float): The appropriate billable rate for the entry.
    """
    expected_keys = CONFIG_DEFAULTS.keys()

    for tag in entry["tags"]:
        if tag not in expected_keys:
            rate = config.get(tag, None)
            if rate:
                return rate

    return config["billable"]


def update_row_data(rows, task):
    """
    Apply task data to some table row data and its descendent children.

    Parameters:
        rows (list): The current nested list of table row data.
        task (tuple): The current task which contains the task
            hierarchy, a tuple of billable hours and the row subtotal.
    Returns:
        rows (list): The updated data rows.
    """
    levels, billable, rate = task
    level, *nested = levels
    row = -1

    for i, t in enumerate(rows):
        if t[0] == level:
            row = i
            break

    if row > -1:
        rows[row][1] = round(rows[row][1] + billable, 3)
        rows[row][2] = locale.currency(rows[row][1] * rate, grouping=True)
    else:
        subt = locale.currency(billable * rate, grouping=True)
        rows.append([level, billable, subt, []])
        row = len(rows) - 1

    if nested:
        next = (nested, billable, rate)
        rows[row][3] = update_row_data(rows[row][3], next)

    return rows


def prepare_table_data(data):
    """
    Organize the Timewarrior logs list into table data for printing.

    Parameters:
        data (tuple): A tuple containing relevant configs and data
        entries
    Returns:
        table_data (tuple): A tuple containing a table rows list and column
        widths.
    """
    #  TODO: Further refactor into smaller, re-usable bits. Maybe.
    config, entries = data
    rows = []

    # For aligning columns later on
    longest_desc = 0
    longest_total = 0
    longest_time = 0

    # For totals
    total_time = 0.0
    cost = 0

    for entry in entries:
        hierarchy = []
        tags = entry.get("tags", None)

        if not tags:
            continue

        dmarker = config["description_marker"]
        if dmarker:
            task = take_first(lambda t: t.startswith(dmarker), tags)
        else:
            task = take_first(lambda t: not_metadata(t, config), tags)

        if dmarker and not task:
            task = take_first(lambda t: not_metadata(t, config), tags)

        if not task:
            continue

        # Find Project.category tree.
        pmarker = config["project_marker"]
        project_tree = take_first(lambda t: t.startswith(pmarker), tags)

        if project_tree:
            hierarchy += project_tree[1:].split(config["separator"])

        hierarchy.append(task)

        for i, name in enumerate(hierarchy):
            # Include depth marker in longest_desc
            length = len(name) + i + 1
            if longest_desc < length:
                longest_desc = length

        billables = get_billable_hours(entry)
        total_time = round(total_time + billables, 3)
        rate = get_rate(entry, config)
        cost += round(rate * billables, 3)
        task = (hierarchy, billables, rate)
        rows = update_row_data(rows, task)

    longest_time = len(str(total_time))
    total_cost = locale.currency(cost, grouping=True)
    longest_total = len(total_cost)
    rows.append(["Total", total_time, total_cost, []])

    return (rows, (longest_desc, longest_time, longest_total))


def parse_lines(stdin):
    """
    Parse the stdin from timewarrior into a tuple containing a config dict
    and a list of log entries.

    Parameters:
        stdin (sys.stdin): Standard input.

    Returns:
        parsed_lines (tuple): A lines data tuple containing config data,
        and a list of timewarrior row dicts.
    """
    lines = [ln.strip() for ln in stdin]
    config_lines = lines[:lines.index("")]
    entries_json = "".join(lines[lines.index("") + 1:])

    configs = reduce(to_config_dict, config_lines, CONFIG_DEFAULTS)
    entries = json.loads(entries_json)
    return (configs, entries)


def print_hr(length, adjust=0, char="-"):
    """
    Print a horizontal rule.

    Parameters:
        length (int): The length of the horizontal rule.
        adjust (int=0): Any arbitrary adjustment in length.
        char (char="-"): The character to build the horizontal rule with.
    """
    print(str(char) * (length + adjust))


def align_column(cellval, width, left=True, adjust=0, wspace=" "):
    """
    Align the content of a column to the left, or the right, by applying
    whitespace/padding to it on either the left or right side.
    Parameters:
        cellval (str): The content of the colum cell.
        width (int): The expected maximum column width.
        left (bool=True): Align the colum to the left?
        adjust (int=0): Arbitrarily adjust the whitespace.
        wspace (char=" "): The whitespace character to use.
    """
    padding_amount = width - len(cellval) + adjust
    whitespace = wspace * padding_amount
    if left:
        return f"{cellval}{whitespace}"
    else:
        return f"{whitespace}{cellval}"


def print_row(row, col_widths, depth=0):
    """
    Apply a depth marker to a row and then print it.
    Parameters:
        row (tuple): The row data.
        col_widths (tuple): The expected column widths.
        depth (int=0): The nested depth of the table row.
    """
    d_col, t_col, s_col = col_widths
    desc, hours, subt, children = row

    depth_mark = "" if depth == 0 else f"{'â€”' * depth} "
    print(align_column(depth_mark + desc, d_col, adjust=2), end="")
    print(align_column(str(hours), t_col, left=False, adjust=2), end="")
    print(align_column(subt, s_col, left=False, adjust=2))

    for child in children:
        print_row(child, col_widths, depth=depth + 1)


def adjust_col_widths(current, new_widths):
    """
    Compare a tuple of column widths against a set of new widths and return
    an updated width tuple with new maximum column sizes.
    Parameters:
        current (tuple): The currently known max column widths.
        new_widths: Some new max column widths.
    Returns:
        adjusted_widths: An updated tuple of max column widths.
    """
    updated = []
    for i, n in enumerate(new_widths):
        updated_val = n if n > current[i] else current[i]
        updated.append(updated_val)

    return tuple(updated)


def print_table(table_data):
    """
    Print the report table.

    Parameters:
        table_data (tuple): The prepared table data.
    See:
        prepare_table_data
    """
    rows, col_widths = table_data
    headers = ["Projects", " Time", " Subtotals"]
    header_widths = map(lambda x: len(x), headers)
    adjusted_widths = adjust_col_widths(col_widths, header_widths)

    header_row = "\n"
    for i, header in enumerate(headers):
        left = True if i == 0 else False
        header_row += align_column(header, adjusted_widths[i],
                                   left=left, adjust=2)
    print(header_row)

    for i, r in enumerate(rows):
        char = "=" if i == 0 or i == len(rows) - 1 else "-"
        print_hr(sum(adjusted_widths), char=char, adjust=6)
        print_row(r, adjusted_widths)


def main():
    data = parse_lines(sys.stdin)
    locale.setlocale(locale.LC_ALL, data[0]["locale"])
    table_data = prepare_table_data(data)
    print_table(table_data)


if __name__ == "__main__":
    main()
